Abstract:
 libcurl <http://curl.haxx.se/libcurl/> のバインディングです。
 各種URLに対するクライアントサイドからのアクセスを実現します。
 http, https, ftp 等をサポートします（サポート対象はリンクされる libcurl によります）。
 libcurlは Daniel Stenberg氏の著作物です。<http://curl.haxx.se/docs/copyright.html>
 
Author: yuzawat <suzdalenator ＠ gmail.coml>

Version: 0.2.2 2010/05/09
======================================================================

Module: curl
 このモジュールは、libcurl - the multiprotocol file transfer library へのバインディングを提供します。
 libcurlの機能を利用して、URLで表現される各種ネットワークリソースの取得やアップロードが可能になります。
 データのインプット・アウトプットを、ポートにマッピングすることができます。
 libcurlへ設定パラメータを渡すために、curl(1)のコマンドラインオプションを模した簡易インターフェイスを用意しています。
 
 
例1:
(let* ((c (make <curl> :url "http://www.example.tld/"))
       (op (curl-open-output-port c))
       (hp (curl-open-header-port c)))
    (curl-setopt! c CURLOPT_VERBOSE 1)
    (curl-setopt! c CURLOPT_FOLLOWLOCATION 1)
    (c)
    (display (get-output-string op)))

例2:
((make <curl> :url "http://www.example.tld/" :options "-v -L"))


----
上位インターフェイス

Class: <curl>
 libcurlのハンドラーです。このインスタンス単位で、URLやその他の動作オプションを設定し、結果を受け取ります。
 取得した結果は、デフォルトでは標準出力に出力します。
 入出力を任意のファイル、もしくはポートに向けたい場合には、curl-open-...のメソッドを使用して下さい。

Instance Variable of <curl>: url
 接続先のURL
 現バージョンでは、curl(1)のワイルドカードURLをサポートしていません。

Instance Variable of <curl>: options
 ハンドラーへのオプション設定の簡易インターフェイスです。curl(1) のコマンドラインオプションを指定できます。
 コマンドラインオプションを文字列のリストの形で設定すると、ハンドラーに反映されます（スペースで区切った文字列でも大丈夫ですが、複雑な指定だと上手くパーズできないのでリストにしておいたほうが無難です）。
 オプションの書式や意味は、curl(1)のバージョン 7.20.1に 基本的に準拠しています。
 ただし、コマンドラインパーザの制限で、curlと全て同じ動作にはなっていません。例えばcurl(1)には同じオプションを複数渡すと、値も複数受け取る動作があるのですが、それには従っていません（-H,--headerは、複数指定することでHTTPのヘッダをその数だけ追加できるのですが、それと同じ動作はできません。-H,--headerについては、カンマ(,)で連結した文字列を引数とすることで複数指定に対応しています）。
 上記の制限があるので、options での設定がむずかしいものは、curl-setopt!を直接使用して下さい。

Instance Variable of <curl>: no-option
 ハンドラーへのデフォルトのオプション設定を無効化します。デフォルトの動作では options の機能で、curl(1)の動作に準じて、暗黙のうちに設定される設定値があります。no-option が #t の場合は、options が行なう設定をすべてスキップします。デフォルトは #f です。

Instance Variable of <curl>: http-headers
 HTTPのヘッダーが、文字列のリストで入っています。options経由("--header=hoge:hoge")でも、直接、curl-setopt!での指定(curl-setopt! curl CURLOPT_HTTPHEADER '("hoge:hoge"))を行っても、ここに反映されます。

Instance Variable of <curl>: rc
 ハンドラーに対して、実行した直前の操作の結果の返値が格納されています。

Instance Variable of <curl>: progress
 ハンドラーのダウンロード・アップロードの進捗データが格納されています。

Class: <curl-multi>
 libcurlの multi interface のハンドラーです。複数の <curl> ハンドラーを、非同期で実行することができます。
 
Instance Variable of <curl-multi>: rc
 ハンドラーに対して、実行した直前の操作の結果の返値が格納されています。

Instance Variable of <curl-multi>: remains
 まだ実行が完了していない <curl> ハンドラーの数です。

Instance Variable of <curl-multi>: handlers
 multi interface ハンドラーに格納された <curl> ハンドラーの数です。
 curl-perform が実行されると、完了したものは <curl> rc が更新されます。

Instance Variable of <curl-multi>: maxconnect
 multi interface ハンドラーの最大同時接続数です。デフォルトは10。<curl-multi>のインスタンス作成時にキーワード引数で設定可能です。

Condition: <curl-error>
 curlモジュールのコンディションです。<error>を継承しています。

Method: curl-setopt! (c <curl>) CURLOPT_... val
 ハンドラーに対して設定を行ないます。
 CURLOPT_...はlibcurlで定義されている定数です。例えばURLの指定はCURLOPT_URL、タイムアウトの秒数指定はCURLOPT_TIMEOUTです。詳細は libcurlの関数、curl_easy_setopt のドキュメントを参照して下さい。<http://curl.haxx.se/libcurl/c/curl_easy_setopt.html>
 valはCURLOPT_...に応じた値を指定します。文字列か、文字列のリストか、数字か、#f のいずれかになります。
 注意: Funtion Pointerを渡すためのインターフェイスは設けていません。struct curl_slist を渡すもの（CURLOPT_HTTPHEADERなど）に対しては文字列のリストを渡して下さい。
 正常終了した場合、#t を返します。

Method: curl-setopt! (cm <curl-multi>) CURLMOPT_... val
 multi interface ハンドラーに対して設定を行ないます。CURLOPT_...はlibcurlで定義されている定数です。詳細は libcurlの関数、curl_multi_setopt のドキュメントを参照して下さい。<http://curl.haxx.se/libcurl/c/curl_multi_setopt.html>
 注意: Funtion Pointerを渡すためのインターフェイスは設けていません。
 正常終了した場合、#t を返します。

Method: curl-perform (c <curl>)
 ハンドラーを実行します（URLへの接続を行います）。
 正常終了した場合、#t を返します。

Method: curl-perform (cm <curl-multi>)
 multi interface ハンドラーを実行します。
 正常終了した場合、#t を返します。

Method: curl-getinfo (c <curl>)
 実行後のハンドラーの情報を取得します。連想リストを返します。
 返却される値については、libcurlのドキュメントを参照して下さい。<http://curl.haxx.se/libcurl/c/curl_easy_getinfo.html>

Method: curl-cleanup! (c <curl>)
 ハンドラーのクリンナップをします。クリンナップしたハンドラーは使用できなくなります。
 正常終了した場合、#t を返します。

Method: curl-cleanup! (cm <curl-multi>)
 multi interface ハンドラーのクリンナップをします。クリンナップしたハンドラーは使用できなくなります。
 正常終了した場合、#t を返します。

Method: curl-reset! (c <curl>)
 ハンドラーをリセットします。
 正常終了した場合、#t を返します。

Method: curl-strerror (c <curl>)
 ハンドラーの最後の状態を示す文字列を返します。

Method: curl-strerror (cm <curl-multi>)
 multi interface ハンドラーの最後の状態を示す文字列を返します。

Method: curl-handler-add! (cm <curl-multi>) (c <curl>)
 multi interface ハンドラーに、ハンドラーを追加します。
   
Method: curl-handler-remove! (cm <curl-multi>) (c <curl>)
 multi interface ハンドラーから、ハンドラーを削除します。

Method: curl-fdset (cm <curl-multi>)
 実行中のmulti interface ハンドラーが使用しているfdsetを取り出します。
 3つの <sys-fdset> のリスト('(readfds writefds exceptfds))を返します。

Method: curl-multi-info->list (cm <curl-multi>)
 multi interface ハンドラーで、実行が終了したハンドラーを返します。一度、返したハンドラーは、二度と返しません。
 Return Codeと、<curl-base>のペアのリスト（'((rc . <curl-base>)...)）を返します。

Method: curl-open-output-file (c <curl>) filename
Method: curl-open-input-file (c <curl>) filename
Method: curl-open-header-file (c <curl>) filename
Method: curl-open-error-file (c <curl>) filename
 取得したデータ・アップロードするデータ・ヘッダー情報・デバッグ情報を、指定した文字列のファイルと結び付けます。
 <curl-file> を返します。<curl-file> はファイルポインタです。ファイルポインタを明示的に閉じないとバッファがフラッシュされないので、閉じるために curl-close-file を使って下さい。
 curl-open-error-file 以外は、curl-open-*-port に対応するものがあります。

Method: curl-open-output-port (c <curl>) &optional outport
Method: curl-open-input-port (c <curl>) inport
Method: curl-open-header-port (c <curl>) &optional outport
 取得したデータ・アップロードするデータ・ヘッダー情報を、それぞれポートと結び付けます。ポートを返します。
 curl-open-output-portとcurl-open-header-portでは、オプションのポートを省略した場合には、文字列出力ポートを返します。

Function: curl-headers->alist string &optional num
 ヘッダ情報の文字列をリストに変換します。libcurlではHTTP接続でリダイレクトされた場合、リダイレクトごとにヘッダが記録されるので、出力結果は連想リストのリストになります。オプションで数字を指定すると、その順位の連想リストが返されます。-1を指定すると最後の連想リストを返します。

Generic application: c
 (curl-perform (c <curl>))と同意です。 

Generic application: cm
 (curl-perform (cm <curl-multi>))と同意です。 

Function: curl-version
 リンクされているlibcurlのバージョン情報の文字列を返します。

Function: curl-version-info
 リンクされているlibcurlのバージョン情報やサポートしている機能、プロトコルなどの連想リストを返します。

Method: curl-set-progress! (c <curl>) &optional show-bar
 ダウンロード・アップロードの進捗報告を有効にします。オプション引数、show-bar が #t だと標準エラー出力に簡易プログレスバーが表示されます。

Method: curl-get-progress (c <curl>)
 ダウンロード・アップロードの進捗報告をします。2つの数字のリストを返します。データの意味はそれぞれ、
  '("total byte" "up/downloaded byte")
 となります。

Function: http-get server request-uri &keyword sink flusher no-redirect ssl...
Function: http-head server request-uri &keyword no-redirect ssl...
Function: http-post server request-uri body &keyword sink flusher no-redirect ssl...
Function: http-put server request-uri body &keyword sink flusher no-redirect ssl...
Function: http-delete server request-uri &keyword sink flusher no-redirect ssl...

 モジュールrfc.httpで定義されている同名の Functionと同じインターフェイスを実現するためのラッパーです。
 キーワード引数 ssl が追加されています。これが #t であれば（そしてlibcurlがSSLをサポートしていれば）SSL接続を試みます。

----
下位インターフェース

Builtin Class: <curl-base>
 libcurlのeasy interfaceのハンドラー

Builtin Class: <curl-multi-base>
 libcurlのmulti interfaceのハンドラー

Builtin Class: <curl-share-base>
 libcurlのshare interfaceのハンドラー

Builtin Class: <curl-slist>
 libcurl内のデータ構造 struct curl_slist です。実体は一般的な単方向リストです。

Constant: CURLE_...
 libcurlのエラーコード

Constant: CURLOPT_...
 libcurlのオプションコード

Constant: CURLINFO_...
 libcurlの情報コード

Function: curl-global-init flag
 libcurlの大域変数の初期化を行います。正常終了した場合、0を返します。

Function: curl-global-cleanup
 libcurlの大域変数のクリンナップを行います。正常終了した場合、#t を返します。

Function: curl-easy-init
 easy interface のハンドラーを生成します。(hnd <curl-base>) を返します。

Function: curl-easy-cleanup hnd
 easy interface のハンドラーをクリンナップします。正常終了した場合、0を返します。

Function: curl-easy-setopt hnd CURLOPT_... val
 easy interface のハンドラーに、オプション設定を行います。正常終了した場合、0を返します。

Function: curl-easy-perform hnd
 easy interface のハンドラーを実行します（URLへの接続を行います）。正常終了した場合、0を返します。

Function: curl-easy-reset hnd
 easy interface のハンドラーをリセットします。正常終了した場合、#undef を返します。

Function: curl-easy-duphandle hnd
 easy interface のハンドラーを複製します。新しい(hnd <curl-base>) を返します。

Function: curl-easy-getinfo hnd CURLINFO_...
 実行後の easy interface のハンドラーの情報を取得します。
 情報内容は、CURLINFO_...で指定し、それに応じて、文字列、数字、文字列リスト、#f のいずれかを返します。

Function: curl-easy-strerror errono
 libcurlの返したFunctionの終了コードを、文章として意味のあるメッセージに変換した文字列を返します。

Function: curl-easy-escape hnd string length
 指定された長さの文字列を、URLエンコードします。
 
Function: curl-easy-unescape hnd string length outlength
 指定された長さの文字列を、URLデコードします。

Function: curl-getenv string
 指定された環境変数を取得します。

Function: curl-getdate string
 指定された文字列で表現された日付を、POSIX time にして返します。

Function: curl-multi-init
 multi interface のハンドラーを生成します。(mhnd <curl-multi-base>) を返します。

Function: curl-multi-cleanup mhnd
 multi interface のハンドラーをクリンナップします。

Function: curl-multi-add-handle mhnd hnd
 multi interface のハンドラーに、easy interfaceハンドラーを追加します。
 
Function: curl-multi-remove-handle mhad hand
 multi interface のハンドラーに、easy interfaceハンドラーを追加します。

Function: curl-multi-fdset mhnd
 multi interface のハンドラーに、easy interfaceハンドラーを追加します。

Function: curl-multi-info-read mhnd msg_in_queue
 multi interface のハンドラーで、実行完了したeasy interfaceハンドラーを返します。

Function: curl-share-init
 shared interface のハンドラーを生成します。(shnd <curl-share-base>) を返します。

Function: curl-share-setopt shnd CURLSHOPT_... val
 share interface のハンドラーに、オプション設定を行います。正常終了した場合、0を返します。

Function: curl-share-strerror
 libcurlの返したFunctionの終了コードを、文章として意味のあるメッセージに変換した文字列を返します。

Function: curl-open-file hnd CURLOPT_... filename
 easy interface のハンドラーに、CURLOPT_...で指定された種別のデータを、filenameで指定されたファイルハンドラーに結び付けます。正常終了すると (fp <curl-file>) を返します。<curl-file> はただの FILE* です。

Function: curl-close-file fp
 (fp <curl-file>)（ファイルポインタ）を閉じます。正常終了した場合、#undef を返します。

Function: curl-open-port hnd CURLOPT_... port
 easy interface のハンドラーに、CURLOPT_...で指定された種別のデータを、portで指定されたポートに結び付けます。

Function: curl-list->curl-slist list
Function: curl-slist->list curl_slist
 Schemeの文字列のリストと、<curl-slist>を相互に変換します。

======================================================================
- curl(1)互換の簡易インターフェース(:options)でサポートされているのは以下の通りです
 A|user-agent
 L|location
   location-trusted
 X|request
 o|output
 O|remote-name
 R|remote-time
 D|dump-header
   stderr
 v|verbose
   ignore-content-length
 e|referer
   interface
   url
   tcp-nodelay
   compressed  
 u|user
   basic
   digest
   negotiate
   ntlm
   anyauth
 f|fail
 i|include
 I|head
 G|get
 H|header
 x|proxy
   proxy1.0
   socks4
   socks4a
   socks5
   socks5-gssapi-nec
   socks5-gssapi-service
   socks5-hostname
 p|proxytunnel
   noproxy
 U|proxy-user
   proxy-anyauth
   proxy-basic
   proxy-digest
   proxy-negotiate
   proxy-ntlm
   post301
   post302
 T|upload-file
 j|junk-session-cookies
 b|cookie
 c|cookie-jar
 d|data|data-ascii
   data-binary
   data-urlencode
   max-filesize
   max-redirs
   connect-timeout
 m|max-time
 0|http1.0
   raw
 z|time-cond
 r|range
   local-port
 4|ipv4
 6|ipv6
   ssl
   ssl-reqd
 1|tlsv1
 2|sslv2
 3|sslv3
   cacert
   capath
   cert-type 
   ciphers
   random-file
   egd-file
   engine
   sessionid
   no-sessionid
 E|cert
   key
   key-type
   pass
 k|insecure
   pubkey
   crlfile
   hostpubmd5
 P|ftp-port
   ftp-pasv
 Q|quote
 l|list-only
 a|append
   ftp-create-dirs
 B|use-ascii
   crlf
   disable-eprt
   disable-epsv
   no-eprt
   no-epsv
   eprt
   epsv
   ftp-skip-pasv-ip
   ftp-alternative-to-user
   ftp-account
   ftp-method
   krb
   ftp-ssl
   ftp-ssl-control
   ftp-ssl-reqd
   ftp-ssl-ccc
   ftp-ssl-ccc-mode
 t|telnet-option
   tftp-blksize
   mail-rcpt
   mail-from
 #|progress-bar
 Y|speed-limit
 y|speed-time
   limit-rate
 C|continue-at（引数"-"はサポートせず）
   no-keepalive
   keepalive
   keepalive-time


- 以下のものは同じ文字列での指定ができませんので提示されているように書き換えをお願いします。
 --http1.0 => --http1_0
 --proxy1.0 => --proxy1_0
 -# => なし（--progress-bar で指定してください）


- 以下はサポートされません。
   create-dirs
 s|silent
 q
 K|config
 n|netrc
   netrc-optional
 S|show-error
   environment
   trace
   trace-ascii
   trace-time
 w|write-out
   retry
   retry-delay
   retry-max-time
   buffer
 N|no-buffer

 F|form
   form-string
 g|globoff
   remote-name-all

======================================================================

Todo
- 未テストのプロトコルの動作確認
- データアップロード関連の十分なテスト
- test.scmをもう少しましに


制限事項
- curl独自のURLのワイルドカードをサポートしていません。
- HTTP POST FORMデータ生成の機能をサポートしていません。
- 以下のlibcurl関数のバインディングは未実装、もしくは利用しやすいインターフェイスを作っていません。
 curl_easy_pause 
 curl_easy_recv 
 curl_easy_send 
 curl_formadd 
 curl_formfree 
 curl_formget 
 curl_free 
 curl_global_init_mem 
 curl_multi_assign 
 curl_multi_socket 


動作確認環境（と云っても、"make check"が通るだけ）
- Mac OX X 10.6.3 (libcurl 7.21.0. + Gauche 0.9)
- Ubuntu 9.04 Jaunty (libcurl 7.21.1. + Gauche 0.9)
- Mac OX X 10.6.2 (libcurl 7.19.7. + Gauche 0.9)
- Mac OX X 10.5.8 (libcurl 7.16.3 + Gauche 0.8.14)
- Mac OX X 10.5.8 (libcurl 7.19.3 + Gauche 0.8.14)
- Ubuntu 9.04 Jaunty (libcurl 7.18.2 + Gauche 0.8.13)
- Debian GNU/Linux squeeze/sid (libcurl 7.19.4 + Gauche 0.8.13)
- FreeBSD 7.1-RELEASE-p6 (libcurl 7.19.4 + Gauche 0.8.14)

以上
